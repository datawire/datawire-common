#!/usr/bin/env python

import logging, sys
from argparse import ArgumentParser
from proton import Message
from proton.reactor import Reactor
from datawire import Address, Agent, Container, Tether, Stream, Sender, \
    Receiver, Processor, __version__
from datawire.stream import MultiStore, Store

log = logging.getLogger(__name__)

class HistoryStore(Store):

    def __init__(self, size=0):
        Store.__init__(self)
        self._size = size

    def compact(self, tail):
        if len(tail) < self._size:
            return tail
        else:
            return tail[len(tail)-self._size:]

class ManiStore(MultiStore):

    def __init__(self, history, on_create):
        MultiStore.__init__(self)
        self.history = history
        self.on_create = on_create

    def resolve(self, address):
        store = HistoryStore(self.history)
        self.on_create(address)
        return store

class Manifold:

    def __init__(self, args):
        svc_host = Address(args.address).host
        self.tether = Tether(args.directory, args.address, None,
                             host=args.ann_host or args.host or svc_host,
                             port=args.ann_port or args.port,
                             policy="consistent",
                             agent_type="manifold")
        self.host = args.host or svc_host
        self.port = args.port
        self.stream = Stream(ManiStore(args.history, self.on_create))
        self.push = args.push
        self.senders = {}
        self.directory = Receiver(self.tether.directory, Processor(self))
        self.container = Container(self.stream)
        self.container[self.tether.agent] = Agent(self.tether, self)
        self.handlers = [self.container]

    def sample(self, stats):
        stats[u"manifold_messages"] = self.stream.store.size + self.stream.queued
        stats[u"manifold_queued"] = self.stream.queued
        stats[u"manifold_streams"] = len(self.stream.store.stores)
        if self.stream.store.stores:
            depth = max([len(s.entries) for s in self.stream.store.stores.values()])
        else:
            depth = 0
        stats[u"manifold_depth"] = depth
        stats[u"manifold_last_idle"] = int(self.stream.store.last_idle*1000)
        stats[u"manifold_max_idle"] = int(self.stream.store.max_idle*1000)

    def on_create(self, address):
        if self.push and address not in self.senders:
            log.debug("creating sender from %s to %s", address, self.push)
            sender = Sender(self.push, self.stream, source=address)
            self.senders[address] = sender
            sender.start(self.reactor)

    def on_reactor_init(self, event):
        self.reactor = event.reactor
        event.reactor.acceptor(self.host, self.port)
        self.tether.start(event.reactor)
        self.directory.start(event.reactor)

    def on_message(self, event):
        props = event.message.properties or {}
        policy = props.get("policy", None)
        address, routes = event.message.body
        if (address == self.tether.address or address.startswith(self.tether.address + "/")):
            self.stream.relink()
        elif self.push and (address == self.push or address.startswith(self.push + "/")):
            if policy == "ordered" and routes:
                host, port, raddr = routes[0][0]
                self.stream.relink(receiver=False, host=host, port=port, address=raddr or address)
            else:
                self.stream.relink(receiver=False)

parser = ArgumentParser(prog="manifold")
parser.add_argument("-d", "--directory", help="datawire directory")
parser.add_argument("-n", "--host", help="hostName binding")
parser.add_argument("-p", "--port", default="5678", help="port binding")
parser.add_argument("--ann-host", help="announced hostname (EC2)")
parser.add_argument("--ann-port", help="announced port (EC2)")
parser.add_argument("-l", "--level", default="warn", help="logging level")
parser.add_argument("-o", "--output", help="file for log output")
parser.add_argument("address", help="service address")
parser.add_argument("--push", help="push address")
parser.add_argument("--history", type=int, default=0, help="per address history")
parser.add_argument("-V", "--version", action="version", version="%(prog)s " + __version__)

args = parser.parse_args()
level = getattr(logging, args.level.upper())
if args.output:
    logging.basicConfig(filename=args.output, level=level)
else:
    logging.basicConfig(stream=sys.stderr, level=level)

Reactor(Manifold(args)).run()
