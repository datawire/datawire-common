#!/usr/bin/env python

# Copyright 2015 datawire. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os, sys
from argparse import ArgumentParser
from collections import OrderedDict

from proton.reactor import Reactor
from proton.handlers import CFlowController
from proton import Message
from datawire import Configuration, Stream, Sender, Receiver, __version__

CONFIG = os.path.expanduser("~/.datawire/config")

defaults = """
[DEFAULT]
logging: WARNING

[Datawire]
directory_host: localhost
"""

loader = Configuration(defaults)
try:
    config = loader.parse()
except Exception as exc:
    sys.stderr.write("Failed to load existing configuration file(s): %s" % exc)
    loader.exit_with_config_error("Failed to load configuration")
    config = None  # Not reached


class Command:

    def __init__(self, args):
        self.args = args


class ConfigInit(Command):

    def on_reactor_init(self, event):
        dir = os.path.dirname(CONFIG)
        if not os.path.exists(dir):
            os.makedirs(dir)
        if not os.path.exists(CONFIG):
            cfg = open(CONFIG, "write")
            try:
                config.write(cfg)
            finally:
                cfg.close()

class ConfigList(Command):

    def on_reactor_init(self, event):
        config.write(sys.stdout)

class ConfigSet(Command):

    def on_reactor_init(self, event):
        config.set(self.args.section, self.args.key, self.args.value)
        cfg = open(CONFIG, "write")
        try:
            config.write(cfg)
        finally:
            cfg.close()

def csi(*args):
    result = ""
    numeric = []
    for a in args:
        if isinstance(a, int):
            numeric.append(str(a))
        else:
            result = "%s\x1B[%s%s" % (result, ";".join(numeric), a)
            numeric = []
    return result

CLS = csi(2, "J", 1, 1, "H")
RED = csi(1, 91, "m")
RESET = csi(0, "m")

delay = 3.0

def ansi(mode, st):
    return "%s%s%s" % (mode, st, RESET)

class RouteList(Command):

    def on_reactor_init(self, event):
        self.recv = Receiver(self.args.directory, CFlowController(1024), self, drain=not self.args.follow)
        self.recv.start(event.reactor)
        self.message = Message()
        self.empty = True
        self.did_connect = False
        self.connection_attempts = 0

    def on_link_local_open(self, event):
        self.updated = []
        if self.args.follow:
            self.routes = OrderedDict()
            self.render()
        self.connection_attempts += 1

    def on_link_remote_open(self, event):
        self.did_connect = True
        if self.args.follow:
            self.render()

    def render(self):
        sys.stdout.write(CLS)
        self.empty = True
        for address, (routes, policy) in self.routes.items():
            self.render_routes(address, routes, policy)
        if self.empty:
            if self.recv.linked:
                print "(no routes)"
            else:
                print "(detached)"
        sys.stdout.flush()

    def format_route(self, route):
        (host, port, target), owner = route
        result = target or ""
        if port:
            result += " on %s:%s" % (host, port)
        elif host:
            result += " on %s" % host
        # displaying the owner clutters things for the demo, so remove it for now
        # result += " (%s)" % owner
        return result

    def render_routes(self, address, routes, policy):
        self.empty = False
        line = "%s -> (%s) %s" % (address, policy, "; ".join(map(self.format_route, routes)) or "(deleted)")
        if address in self.updated:
            print ansi(RED, line)
        else:
            print line

    def on_timer_task(self, event):
        task = event.context
        if self.updated != task.updated: return
        self.updated.remove(task.address)
        if task.address not in self.updated and not self.routes[task.address][0]:
            del self.routes[task.address]
        self.render()

    def on_delivery(self, event):
        if self.message.recv(event.link):
            self.on_message(event)
            event.delivery.settle()

    def on_message(self, event):
        msg = self.message
        if msg.subject == "routes":
            address = msg.body[0]
            routes = msg.body[1]
            policy = msg.properties["policy"]
            if self.args.follow:
                self.updated.append(address)
                task = event.reactor.schedule(delay, self)
                task.updated = self.updated
                task.address = address
                self.routes[address] = (routes, policy)
                self.render()
            else:
                self.render_routes(address, routes, policy)

    def on_drained(self, event):
        self.recv.stop(event.reactor)

    def on_transport_closed(self, event):
        if not self.args.follow and not self.did_connect:
            print "Could not connect to directory %r (attempt %d)" % (self.args.directory, self.connection_attempts)
            if self.connection_attempts >= 5:
                self.recv._link = None  # XXX We don't have an API for this yet...

    def on_reactor_final(self, event):
        if not self.args.follow and self.empty:
            if self.did_connect:
                print "(no routes)"
            else:
                sys.stderr.write("Unable to connect to directory %r\n" % self.args.directory)

class RouteAddDel(Command):

    def on_reactor_init(self, event):
        self.out = Stream()
        self.sender = Sender(self.args.directory, self.out)
        self.sender.start(event.reactor)
        msg = Message()
        msg.properties = {}
        msg.properties[u"opcode"] = self.args.opcode

        if self.args.host is None and self.args.port is None and self.args.target is None:
            target = None
        else:
            target = (self.args.host, self.args.port, self.args.target)

        msg.body = [self.args.address, target, self.args.owner]
        self.out.put(msg)
        self.out.close()

def main():
    config_directory = "//%s/directory" % config.get("Datawire", "directory_host")

    dw = ArgumentParser(prog='dw',
                        description='Datawire command-line interface',
                        epilog='Visit http://www.datawire.io/docs for details on how to use Datawire.')
    dw.add_argument('-d', '--directory', default=config_directory,
                    help='directory address (e.g., //hostname/directory)')
    dw.add_argument("-V", "--version", action="version", version="%(prog)s " + __version__)
    cmds = dw.add_subparsers()

    # config subcommands

    config_args = cmds.add_parser('config', help='inspect or modify local configuration')
    config_cmds = config_args.add_subparsers()

    # config init
    config_init = config_cmds.add_parser('init', help='create a local configuration directory')
    config_init.set_defaults(command=ConfigInit)

    # config list subcommand
    config_list = config_cmds.add_parser('list', help='list local configuration values')
    config_list.set_defaults(command=ConfigList)

    # config list subcommand
    config_set = config_cmds.add_parser('set', help='set a local configuration value')
    config_set.add_argument('section', help='config section')
    config_set.add_argument('key', help='config key')
    config_set.add_argument('value', help='config value')
    config_set.set_defaults(command=ConfigSet)

    # route subcommand

    route = cmds.add_parser('route', help='route related subcommands')
    route_cmds = route.add_subparsers()

    # route list subcommand
    lst = route_cmds.add_parser('list', help='list routes')
    lst.add_argument('-f', '--follow', action="store_true", help='follow updates')
    lst.set_defaults(command=RouteList)

    add_del = ArgumentParser(add_help=False)
    add_del.add_argument('-n', "--host", help='redirect network host')
    add_del.add_argument('-p', "--port", help='redirect port')

    # route add subcommand
    route_add = route_cmds.add_parser('add', help='add a route', parents=[add_del])
    route_add.add_argument('address', help='address to match')
    route_add.add_argument('target', help='redirect address')
    route_add.add_argument('-o', '--owner', default=os.environ.get("USER", "default"), help='route owner')
    route_add.set_defaults(command=RouteAddDel, opcode="route")

    # route del subcommand
    route_del = route_cmds.add_parser('del', help='add a route', parents=[add_del])
    route_del.add_argument('address', nargs='?', help='address to match')
    route_del.add_argument('target', nargs='?', help='redirect address')
    route_del.add_argument('-o', '--owner', help='route owner')
    route_del.set_defaults(command=RouteAddDel, opcode="unroute")

    args = dw.parse_args()
    Reactor(args.command(args)).run()

main()
