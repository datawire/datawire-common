/**
 * Copyright 2015 datawire. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.datawire;

/**
 * Handler methods for events generated by datawire. An implementation of this
 * interface is required to forward all events it does not want to implement to
 * the
 * {@link org.apache.qpid.proton.engine.Handler#onUnhandled(org.apache.qpid.proton.engine.Event)}
 * To facilitate this it is recommended for handler classes to extend the
 * {@link BaseDatawireHandler} which just forwards all events to the onUnhandled
 * method.
 * 
 */
public interface DatawireHandler extends org.apache.qpid.proton.engine.Handler {

    /**
     * The method invoked for {@link DatawireEvent.Type#ENCODED_MESSAGE} events.
     * These events are generated by the {@link Decoder} handler.
     * 
     * @param event
     *            The event with the encoded message accessible through the
     *            {@link DatawireEvent#getEncodedMessage()}
     */
    public void onEncodedMessage(DatawireEvent event);

    /**
     * The method invoked for {@link DatawireEvent.Type#MESSAGE} events. These
     * events are generated by the {@link Decoder} handler.
     * 
     * @param e
     *            The event where the message is accessible through the
     *            {@link DatawireEvent#getMessage()}
     */
    public void onMessage(DatawireEvent e);

    /**
     * The method invoked for {@link DatawireEvent.Type#SAMPLE} events. These
     * events are generated by the {@link Sampler} handler.
     * 
     * @param e
     *            An event that references the {@link DatawireEvent#getLink()}
     *            that needs sampling.
     */
    public void onSample(DatawireEvent e);

    /**
     * The method invoked for {@link DatawireEvent.Type#DRAINED} events. There
     * events are generated by the {@link Sender} and {@link Receiver} handlers.
     * 
     * @param event
     *            An event that references the {@link DatawireEvent#getLink()}
     *            that is drained.
     */
    public void onDrained(DatawireEvent event);
}
