#!/usr/bin/env python

# Copyright 2015 datawire. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import logging, pprint, sys
from argparse import ArgumentParser
from collections import OrderedDict
from proton.reactor import Reactor
from datawire import Processor, Receiver

class Client:

    def __init__(self, args):
        if args.directory:
            self.directory = Receiver(args.directory, Processor(self))
        else:
            self.directory = None

        self.receivers = [Receiver(a, Processor(self)) for a in args.address]
        self.stats = OrderedDict()

    def on_reactor_init(self, event):
        if self.directory:
            self.directory.start(event.reactor)
        for rcv in self.receivers:
            rcv.start(event.reactor)

    def add_routes(self, event):
        address, routes = event.message.body
        if "/agents/" in address:
            if routes:
                rcv = Receiver(address, Processor(self))
                self.receivers.append(rcv)
                rcv.start(event.reactor)
            else:
                for rcv in self.receivers:
                    if rcv.source == address:
                        self.receivers.remove(rcv)
                        rcv.stop(event.reactor)
                        del self.stats[address]
                        break

    def on_message(self, event):
        if event.message.subject == "routes":
            self.add_routes(event)
        else:
            body = event.message.body
            self.stats[body["agent"]] = body
            self.render()

    def render(self):
        self.clear()
        for stat in self.stats.values():
            print "="*60
            self.render_stats(stat)

    def clear(self):
        sys.stdout.write("%c[2J%c[;H" % (27, 27))

    def render_stats(self, stats):
        items = stats.items()
        items.sort()
        width = max([len(k) for k, v in items])
        for k, v in items:
            print "%*s:" % (width, k),
            print pprint.pformat(v).replace("\n", "\n%*s" % (width+2, ""))

logging.basicConfig(level=logging.WARNING)

parser = ArgumentParser(prog="trace")
parser.add_argument('-d', '--directory', help="directory")
parser.add_argument("address", nargs='*', help="source addresses")

Reactor(Client(parser.parse_args())).run()
